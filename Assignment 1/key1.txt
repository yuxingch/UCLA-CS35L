Exercise 1.1
1. e m a c s SP e x e r 1 . h t m l Enter
2. C-s U T F - 8 Enter
3. (Move to the line after UTF-8 which contains “Instructions”)
   C-s I n s t r u c t i o n s Enter
4. (the next letter following “HTML”)
   M-< C-s H T M L C-f
5. M-< C-s a r r o w M-b
6. C-e
7. C-a
8. M-<
9. No, I haven’t been moving the cursor using the arrowing keys.
10. One way of reducing the number of keystrokes when people use search
command is that C-s is used for searching the text behind and C-r is used
for searching the text before.
#8 Use M-< instead of using “M-g g 1 Enter” to go back to the first line
of the file.

Exercise 1.2
1. e m a c s SP e x e r 2 . h t m l Enter
2. M-g g 1 8 Enter C-k
3. M-< C-s D E L C-a C-k
4. M-< C-s h t t p : / / e n . w i k i C-s M-h Backspace
5. M-< C-s < ! - M-z > Backspace Backspace Backspace

Exercise 1.3
1. 
2. M-% A s s i g n m e n t SP 1 Enter A s s i g n m e n t SP 3 7 Enter y
y q
3. M-< M-% U T F - 8 Enter U S - A S C I I Enter y q
4. M-< C-s < o l > C-o
5. Save the file: C-x C-s
   Exit: C-x C-c

Exercise 1.4
1.
2.
3. M-> C-r < ! - - SP d i f f Enter C-@ C-e M-w M-g g 1 8 Enter C-y
4. M-> C-r < ! - - SP D E L Enter C-@ C-e M-w M-g g 9 4 Enter C-y
   M-> C-r < ! - - SP Y o u Enter C-@ M-h M-w M-g g 3 0 1 Enter C-y C-d 
C-p C-d C-p C-d
   M-> C-r < ! - C-a C-f C-@ C-e M-w M-g g 340 Enter C-y Enter C-@ C-e
Backspace
5. M-> C-r - - - SP Enter M-r C-w
6. C-x u
7. M-> C-r - - - SP Enter < ! - - Enter M-> - - >
8. M-< M-x r e p l a c e - s t r i n g Enter < o l > Enter < O l > Enter
   7 instances
9.

Exercise 1.5
1. M-x m a k e - d i r e c t o r y Enter j u n k Enter
2. C-x d j u n k Enter C-x C-f h e l l o . c Enter
   Copy the content
   C-x C-s
3. M-x c o m p i l e Enter h e l l o Enter
4. M-x s h e l l Enter . / h e l l o > h e l l o - o u t Enter C-x C-f
h e l l o - o u t Enter
5.
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}


Exercise 1.6
1. C-x b Enter
2. ( r a n d o m ) C-j
   And it gives 873904683491941451
3.
( s e t q SP x SP ( r a n d o m ) ) C-j
-1272684881816716021
( s e t q SP y SP ( r a n d o m ) ) C-j
-772373269967662123
( s e t q SP z SP ( r a n d o m ) ) C-j
571010644243049757

4.( * SP x SP y SP z ) C-j
970219569018334827
The result seems incorrect.

5.M-: ( * SP x SP y SP z ) Enter
result: 970219569018334827 (#o65667230727536067153, #xd76e98ebd786e6b)
The result looks the same as the previous one, but it has
(#o65667230727536067153, #xd76e98ebd786e6b) after that.

6. No, they are not. Integers are chosen based on a probability
distribution. According to the sources I found, computer uses a seed
value and an algorithm to generate integers that seem random. Since
there is an algorithm, the integers follow some rules and they are
not truly random in mathematical sense.
Therefore, they are pseudo random.
